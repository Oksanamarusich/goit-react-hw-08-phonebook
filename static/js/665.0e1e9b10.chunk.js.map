{"version":3,"file":"static/js/665.0e1e9b10.chunk.js","mappings":"mPAMMA,EAAaC,EAAAA,KAAaC,MAAM,CACnCC,SAAWF,EAAAA,KACRG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,4BAOFC,EAAe,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OAAOC,EAAAA,EAAAA,KAAA,OAAAC,UACHD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CAACC,cAAe,CACnBV,SAAU,GACVW,MAAO,GACPC,SAAU,IAGVC,iBAAkBhB,EAClBiB,SApBa,SAACC,EAAQC,GAC1B,IAAMC,EAAU,CACZjB,SAAUe,EAAOG,KACjBP,MAAOI,EAAOJ,MACdC,SAAUG,EAAOH,UAErBO,QAAQC,IAAIH,GAEZZ,GAASgB,EAAAA,EAAAA,IAASJ,IAClBD,EAAQM,WACZ,EAU+Bd,UACvBe,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAhB,SAAA,EACDe,EAAAA,EAAAA,MAAA,SAAAf,SAAA,CAAO,YAEHD,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACC,KAAK,OAAOR,KAAK,UACxBX,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACT,KAAK,OAAOU,UAAU,YAExCL,EAAAA,EAAAA,MAAA,SAAAf,SAAA,CAAO,SAEHD,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACC,KAAK,QAAQR,KAAK,WACzBX,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACT,KAAK,OAAOU,UAAU,YAExCL,EAAAA,EAAAA,MAAA,SAAAf,SAAA,CAAO,YAEHD,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACC,KAAK,WAAWR,KAAK,cAC5BX,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACT,KAAK,OAAOU,UAAU,YAExCrB,EAAAA,EAAAA,KAAA,UAAQmB,KAAK,SAAQlB,SAAC,qBAItC,EC1De,SAASqB,IACtB,OACEN,EAAAA,EAAAA,MAAA,OAAAf,SAAA,EACED,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,CAAAtB,UACLD,EAAAA,EAAAA,KAAA,SAAAC,SAAO,oBAETD,EAAAA,EAAAA,KAACH,EAAY,MAGnB,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/auth/operations';\n\n\nconst FormSchema = Yup.object().shape({\n   username:  Yup.string()\n     .min(2, 'Too Short!')\n     .max(50, 'Too Long!')\n     .required('This field is required'),\n//    number: Yup.string()\n//      .matches(/^\\d{3}-\\d{2}-\\d{2}$/, \"Phone number must be in the format 000-00-00!\")\n//      .required('This field is required'),\n  \n });\n\nexport const RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const onSubmitForm = (values, actions) => {\n        const payload = {\n            username: values.name,\n            email: values.email,\n            password: values.password,\n        };\n        console.log(payload);\n    \n        dispatch(register(payload));\n        actions.resetForm();\n    };\n    \n    return <div>\n        <Formik initialValues={{\n            username: '',\n            email: '',\n            password: '',\n      \n        }}\n            validationSchema={FormSchema}\n            onSubmit={onSubmitForm}>\n            <Form>\n                <label>\n                    Username\n                    <Field type=\"text\" name=\"name\" />\n                    <ErrorMessage name=\"name\" component=\"div\" />\n                </label>\n                <label>\n                    Email\n                    <Field type=\"email\" name=\"email\" />\n                    <ErrorMessage name=\"name\" component=\"div\" />\n                </label>\n                <label>\n                    Password\n                    <Field type=\"password\" name=\"password\" />\n                    <ErrorMessage name=\"name\" component=\"div\" />\n                </label>\n                <button type=\"submit\"> Register </button>\n            </Form>\n        </Formik>\n    </div>\n};","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm.jsx';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}"],"names":["FormSchema","Yup","shape","username","min","max","required","RegisterForm","dispatch","useDispatch","_jsx","children","Formik","initialValues","email","password","validationSchema","onSubmit","values","actions","payload","name","console","log","register","resetForm","_jsxs","Form","Field","type","ErrorMessage","component","Register","Helmet"],"sourceRoot":""}