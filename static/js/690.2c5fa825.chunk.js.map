{"version":3,"file":"static/js/690.2c5fa825.chunk.js","mappings":"mPAMMA,EAAaC,EAAAA,KAAaC,MAAM,CAClCC,MAAOF,EAAAA,KACAE,QACAC,SAAS,0BAChBC,SAAUJ,EAAAA,KACJK,IAAI,EAAG,sDACPC,QAAQ,WAAY,4CACrBH,SAAS,4BAILI,EAAY,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MAmBjB,OAAOC,EAAAA,EAAAA,KAAA,OAAAC,UACHD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACHC,cApBc,CAClBX,MAAO,GACPE,SAAU,IAmBNU,SAfa,SAACC,EAAQC,GAC1BC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZ,IAAMG,EAAU,CACZjB,MAAOa,EAAOb,MACdE,SAAUW,EAAOX,UAGrBI,GAASY,EAAAA,EAAAA,IAAMD,IACfH,EAAQK,WACZ,EAMQC,iBAAkBvB,EAAWY,UAC7BY,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,aAAa,MAAKd,SAAA,EACpBY,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,CAAO,SAEHD,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACC,KAAK,QAAQC,KAAK,WACzBlB,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CAACD,KAAK,QAAQE,UAAU,YAEzCP,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,CAAO,YAEHD,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CAACC,KAAK,WAAWC,KAAK,cAC5BlB,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CAACD,KAAK,WAAWE,UAAU,YAEzCpB,EAAAA,EAAAA,KAAA,UAAQqB,QAAM,EAACJ,KAAK,SAAQhB,SAAC,iBAKhD,ECvDe,SAASqB,IACtB,OACET,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACED,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,CAAAtB,UACLD,EAAAA,EAAAA,KAAA,SAAAC,SAAO,aAETD,EAAAA,EAAAA,KAACH,EAAS,MAGhB,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { logIn } from 'redux/auth/operations';\n\n\nconst FormSchema = yup.object().shape({\n    email: yup.string()\n          .email()\n          .required('This field is required'),\n    password: yup.string()\n         .min(4, 'Password is too short - should be 4 chars minimum.')\n         .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.')\n        .required('This field is required'),\n  \n });\n\nexport const LoginForm = () => {\n    const dispatch = useDispatch();\n    const initialValues = {\n        email: '',\n        password: '',\n    \n    };\n    \n    const handleSubmit = (values, actions) => {\n        console.log(values);\n        console.log(actions);\n        const payload = {\n            email: values.email,\n            password: values.password,\n             \n        };\n        dispatch(logIn(payload));\n        actions.resetForm();\n    };\n\n    return <div>\n        <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={FormSchema}>\n            <Form autoComplete=\"off\">\n                <label>\n                    Email\n                    <Field type=\"email\" name=\"email\" />\n                    <ErrorMessage name=\"email\" component=\"div\" />\n                </label>\n                <label>\n                    Password\n                    <Field type=\"password\" name=\"password\" />\n                    <ErrorMessage name=\"password\" component=\"div\" />\n                </label>\n                   <button button type=\"submit\">Log In</button>\n            </Form>\n        </Formik>\n         \n    </div>\n};\n\n\n\n\n\n\n\n// import { useDispatch } from \"react-redux\";\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import * as Yup from 'yup';\n// import { logIn } from 'redux/auth/operations';\n\n\n// const FormSchema = Yup.object().shape({\n    \n//     email: Yup.string().email()\n//         .required('This field is required'),\n//     pssword: Yup.string()\n//          .min(8, 'Password is too short - should be 8 chars minimum.')\n//          .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.')\n//         .required('This field is required'),\n  \n//  });\n\n// export const LoginForm = () => {\n//     const dispatch = useDispatch();\n\n//     const onSubmitForm = (values, actions) => {\n//         const payload = {\n            \n//             email: values.email,\n//             password: values.password,\n//         };\n//         console.log(payload);\n    \n//         dispatch(logIn(payload));\n//         actions.resetForm();\n//     };\n    \n//     return <div>\n//         <Formik\n//             initialValues={{\n            \n//             email: '',\n//             password: '',\n      \n//         }}\n//             validationSchema={FormSchema}\n//             onSubmit={onSubmitForm}>\n//             <Form>\n               \n//                 <label>\n//                     Email\n//                     <Field type=\"email\" name=\"email\" />\n//                     <ErrorMessage name=\"name\" component=\"div\" />\n//                 </label>\n//                 <label>\n//                     Password\n//                     <Field type=\"password\" name=\"password\" />\n//                     <ErrorMessage name=\"name\" component=\"div\" />\n//                 </label>\n//                 <button type=\"submit\"> Log In </button>\n//             </Form>\n//         </Formik>\n//     </div>\n// };","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm.jsx';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}"],"names":["FormSchema","yup","shape","email","required","password","min","matches","LoginForm","dispatch","useDispatch","_jsx","children","Formik","initialValues","onSubmit","values","actions","console","log","payload","logIn","resetForm","validationSchema","_jsxs","Form","autoComplete","Field","type","name","ErrorMessage","component","button","Login","Helmet"],"sourceRoot":""}